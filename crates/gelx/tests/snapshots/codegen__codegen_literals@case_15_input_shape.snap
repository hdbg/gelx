---
source: crates/gelx/tests/codegen.rs
expression: "&content"
---
pub mod example {
    use ::gelx::exports as __g;
    /// Execute the desired query.
    pub async fn query(
        client: impl __g::gel_tokio::QueryExecutor,
    ) -> ::core::result::Result<Output, __g::gel_errors::Error> {
        client.query_required_single(QUERY, &()).await
    }
    pub type Input = ();
    #[derive(::std::fmt::Debug, ::core::clone::Clone, ::core::marker::Copy)]
    pub enum DefaultRelationshipType {
        Follow,
        Block,
        Mute,
    }
    impl ::core::convert::From<DefaultRelationshipType>
    for __g::gel_protocol::value::Value {
        fn from(value: DefaultRelationshipType) -> Self {
            __g::gel_protocol::value::Value::Enum(value.as_ref().into())
        }
    }
    #[derive(::std::fmt::Debug, ::core::clone::Clone)]
    pub struct Output {
        pub my_string: DefaultRelationshipType,
        pub my_number: i64,
        pub several_numbers: Vec<i64>,
        pub array: Vec<i64>,
    }
    /// The original query string provided to the macro. Can be reused in your codebase.
    pub const QUERY: &str = "select { my_string := RelationshipType.Follow, my_number := 42, several_numbers := {1, 2, 3}, array := [1, 2, 3] };";
}
