---
source: crates/edgedb_generator/src/lib.rs
expression: content
---
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize, edgedb_derive::Queryable)]
pub struct ExampleInput {
	pub starts_with: String,
	pub ends_with: String,
}
impl QueryArgs for ExampleInput {
	fn encode(&self, encoder: &mut edgedb_protocol::query_arg::Encoder) -> Result<(), edgedb_errors::Error> {
		let map = edgedb_protocol::named_args! {
			"starts_with" => self.starts_with.clone(),
			"ends_with" => self.ends_with.clone(),
		};
		map.encode(encoder)
	}
}

#[derive(Debug, Clone, serde::Serialize, serde::Deserialize, edgedb_derive::Queryable)]
pub struct ExampleOutput {
	pub description: Option<String>,
	pub name: String,
	pub created_at: edgedb_protocol::model::DateTime,
	pub updated_at: edgedb_protocol::model::DateTime,
	pub slug: String,
	pub id: uuid::Uuid,
	pub wallets: Vec<ExampleOutputWallets>,
}
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize, edgedb_derive::Queryable)]
pub struct ExampleOutputWallets {
	pub created_at: edgedb_protocol::model::DateTime,
	pub id: uuid::Uuid,
	pub updated_at: edgedb_protocol::model::DateTime,
	pub description: Option<String>,
	pub name: Option<String>,
	pub pubkey: String,
	pub primary: bool,
}

pub async fn example(client: &edgedb_tokio::Client, props: &ExampleInput) ->Result<Vec<ExampleOutput>, edgedb_errors:Error> {
	client.query(r#"select Team {**} filter .name like <str>$starts_with ++ '%' and .description like '%' ++ <str>$ends_with;"#, props).await
}
