//! This file is generated by `gelx generate`.
//! It is not intended for manual editing.
//! To update it, run `gelx generate`.
#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused)]
#![allow(unused_qualifications)]
#![allow(clippy::all)]
use super::*;
#[derive(
    ::std::fmt::Debug,
    ::core::clone::Clone,
    ::core::marker::Copy,
    __g::strum::AsRefStr,
    __g::strum::Display,
    __g::strum::EnumString,
    __g::strum::EnumIs,
    __g::strum::FromRepr,
    __g::strum::IntoStaticStr
)]
#[cfg_attr(
    feature = "with_serde",
    derive(__g::serde::Serialize, __g::serde::Deserialize)
)]
#[cfg_attr(feature = "with_query", derive(__g::gel_derive::Queryable))]
#[strum(crate = "__g::strum")]
pub enum Awesomeness {
    Very,
    Somewhat,
    NotReally,
}
impl ::core::convert::From<Awesomeness> for __g::gel_protocol::value::Value {
    fn from(value: Awesomeness) -> Self {
        __g::gel_protocol::value::Value::Enum(value.as_ref().into())
    }
}
#[derive(
    ::std::fmt::Debug,
    ::core::clone::Clone,
    ::core::marker::Copy,
    __g::strum::AsRefStr,
    __g::strum::Display,
    __g::strum::EnumString,
    __g::strum::EnumIs,
    __g::strum::FromRepr,
    __g::strum::IntoStaticStr
)]
#[cfg_attr(
    feature = "with_serde",
    derive(__g::serde::Serialize, __g::serde::Deserialize)
)]
#[cfg_attr(feature = "with_query", derive(__g::gel_derive::Queryable))]
#[strum(crate = "__g::strum")]
pub enum Smartness {
    #[cfg_attr(feature = "with_serde", serde(rename = "low"))]
    #[strum(serialize = "low")]
    Low,
    #[cfg_attr(feature = "with_serde", serde(rename = "mid"))]
    #[strum(serialize = "mid")]
    Mid,
    #[cfg_attr(feature = "with_serde", serde(rename = "genius"))]
    #[strum(serialize = "genius")]
    Genius,
}
impl ::core::convert::From<Smartness> for __g::gel_protocol::value::Value {
    fn from(value: Smartness) -> Self {
        __g::gel_protocol::value::Value::Enum(value.as_ref().into())
    }
}
