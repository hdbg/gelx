//! This file is generated by `gelx generate`.
//! It is not intended for manual editing.
//! To update it, run `gelx generate`.
#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused)]
#![allow(unused_qualifications)]
#![allow(clippy::all)]
use super::*;
#[derive(Debug, Clone, Copy, __g::serde::Serialize, __g::serde::Deserialize)]
#[cfg_attr(
    feature = "ssr",
    derive(
        __g::gel_derive::Queryable,
        __g::strum::AsRefStr,
        __g::strum::Display,
        __g::strum::EnumString,
        __g::strum::EnumIs,
        __g::strum::FromRepr,
        __g::strum::IntoStaticStr
    )
)]
#[cfg_attr(feature = "ssr", strum(crate = "__g::strum"))]
pub enum Awesomeness {
    Very,
    Somewhat,
    NotReally,
}
#[cfg(feature = "ssr")]
impl From<Awesomeness> for __g::gel_protocol::value::Value {
    fn from(value: Awesomeness) -> Self {
        __g::gel_protocol::value::Value::Enum(value.as_ref().into())
    }
}
#[derive(Debug, Clone, Copy, __g::serde::Serialize, __g::serde::Deserialize)]
#[cfg_attr(
    feature = "ssr",
    derive(
        __g::gel_derive::Queryable,
        __g::strum::AsRefStr,
        __g::strum::Display,
        __g::strum::EnumString,
        __g::strum::EnumIs,
        __g::strum::FromRepr,
        __g::strum::IntoStaticStr
    )
)]
#[cfg_attr(feature = "ssr", strum(crate = "__g::strum"))]
pub enum Smartness {
    #[serde(rename = "low")]
    #[cfg_attr(feature = "ssr", strum(serialize = "low"))]
    Low,
    #[serde(rename = "mid")]
    #[cfg_attr(feature = "ssr", strum(serialize = "mid"))]
    Mid,
    #[serde(rename = "genius")]
    #[cfg_attr(feature = "ssr", strum(serialize = "genius"))]
    Genius,
}
#[cfg(feature = "ssr")]
impl From<Smartness> for __g::gel_protocol::value::Value {
    fn from(value: Smartness) -> Self {
        __g::gel_protocol::value::Value::Enum(value.as_ref().into())
    }
}
